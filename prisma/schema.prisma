// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// auth related tables

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  bio           String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  joined        DateTime  @default(now())
  sessions      Session[]

  flashcardSets FlashcardSet[]
  flashcards    Flashcard[]

  tutors Tutor[]

  quizzes      Quiz[]
  questions    Question[]
  quizAttempts Attempt[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model FlashcardSet {
  id          String      @id @default(cuid())
  title       String
  description String
  flashcards  Flashcard[]
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime    @default(now())
}

model Flashcard {
  id        String       @id @default(cuid())
  question  String
  answer    String
  set       FlashcardSet @relation(fields: [setId], references: [id], onDelete: Cascade)
  setId     String
  createdAt DateTime     @default(now())
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Tutor {
  id          String    @id @default(cuid())
  title       String
  description String
  source      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  createdAt   DateTime  @default(now())
}

model Quiz {
  id          String     @id @default(cuid())
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  title       String
  description String
  questions   Question[]
  attempts    Attempt[]
  createdAt   DateTime   @default(now())
}

model Question {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  quiz            Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId          String
  question        String
  possibleAnswers String[]
  correctAnswer   String
  createdAt       DateTime @default(now())
}

model Attempt {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId      String
  score       Decimal
  userAnswers String[]
  createdAt   DateTime @default(now())
}
